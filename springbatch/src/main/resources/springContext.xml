<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
                http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">


	<context:property-placeholder location="classpath:springBatchConstants.properties"/>
    <context:annotation-config />

    <!-- Component scan to find all Spring components -->
    <context:component-scan base-package="springbatch" />


    <!-- Data source - connect to a MySQL instance running on the local machine -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${driverClassName.props}"></property>  
        <property name="url" value="${url.props}"></property>  
        <property name="username" value="${username.props}"></property>  
        <property name="password" value="${password.props}"></property>  
	  </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <jdbc:initialize-database data-source="dataSource">
        <jdbc:script location="org/springframework/batch/core/schema-drop-mysql.sql" />
        <jdbc:script location="org/springframework/batch/core/schema-mysql.sql" />
    </jdbc:initialize-database>

    <!-- Job Repository: used to persist the state of the batch job -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager" />
    </bean>


    <!-- Job Launcher: creates the job and the job state before launching it -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>


    <!-- Reader bean for our simple CSV example -->
    <bean id="employeeReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">

        <!-- <property name="resource" value="file:./sample.csv" /> -->
        <property name="resource" value="${csv.file.name}" />


        <!-- Skip the first line of the file because this is the header that defines the fields -->
        <property name="linesToSkip" value="1" />

        <!-- Defines how we map lines to objects -->
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

                <!-- The lineTokenizer divides individual lines up into units of work -->
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <!-- Names of the CSV columns -->
                        <property name="names" value="empId,empName,dateOfBirth,designation,manager,dateOfJoin,department,salary" />
                    </bean>
                </property>

                <!-- The fieldSetMapper maps a line in the file to a Product object -->
                <property name="fieldSetMapper">
                   <bean  class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="employee" />
						<property name="customEditors">
							  <map>
								<entry key="java.util.Date">
								     <ref bean="dateEditor" />
								</entry>
							  </map>
						</property>
			  	   </bean>
                </property>
            </bean>
        </property>
    </bean>
    
    <bean id="dateEditor"  class="org.springframework.beans.propertyeditors.CustomDateEditor">
	  <constructor-arg>
		<bean class="java.text.SimpleDateFormat">
	              <constructor-arg value="dd-MM-yyyy" />
		</bean>
	  </constructor-arg>
	  <constructor-arg value="true" /> 
	</bean>

	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${sendmail.host}" />
		<property name="port" value="${sendmail.port}" />
		<property name="username" value="${sendmail.username}" />
		<property name="password" value="${sendmail.password}" /> 
		<property name="javaMailProperties">
	            <props>
	                <prop key="mail.smtp.ssl.trust">${sendmail.smtp.ssl.trust}</prop>
	                <prop key="mail.smtp.starttls.enable">${sendmail.smtp.starttls}</prop>                                
	                <prop key="mail.smtp.auth">${sendmail.smtp.auth}</prop>
	            </props>
		</property>
	</bean>
</beans>